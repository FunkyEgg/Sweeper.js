import fs from 'fs';

import { H, EndHtml, P } from'../private/html';
import { Color } from '../private/css';
import { DirAppend } from '../private/dirAppend';

/**
 *  Initalizes the website
 */
// TODO Finish the creation of the website class
class Website {
    /**
     *  Initalizes the website
     *  @param title The title for the website
     */
    constructor(title: String) {
        if (!title) { 
            console.warn('Sweeper.js: No title given, defaulting to "Sweeper.js"');
            title = 'Sweeper.js';
        }
        
        const htmlInitText = `<!-- Generated by Sweeper.js -->
    <!DOCTYPE html>
    <html lang="en">
    <head>
    <link rel="stylesheet" href="styles.css">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    </head>
    <body>\n`;
        
        if (!fs.existsSync('./sweeper.js')) {
            fs.mkdirSync('./sweeper.js');
        }
        
        fs.writeFileSync('./sweeper.js/index.html', htmlInitText);
        fs.writeFileSync('./sweeper.js/styles.css', '/* Generated by Sweeper.js */\n');
        fs.writeFileSync('./sweeper.js/script.js', '/* Generated by Sweeper.js */\n');
    }

    /**
     *  Creates a new html tag element
     *  @param {String} h The HTML tag to be appended
     *  @param {String} [tagClass] The class of the element
     *  @param {String} text The text to be appended
     */
    h(h: Number, text: String, tagClass: String) {
        H(h, text, tagClass);
    }

    /**
     * Creates a new paragraph element
     * @param {String} text The text to be appended
     */
    p(text: String) {
        P(text);
    }

    /**
     *  Colors the given id/class the given color
     *  @param {String} [tagClass] The class of the element to be colored
     *  @param {String} color The color to be applied
     */
    color(color: String, tagClass: String) {
        Color(color, tagClass);
    }

    /**
     *  Directly appends to file - NOTE THIS WILL MOST LIKELY BE REMOVED IN THE FUTURE 
     *  @param {String} code The code to append
     *  @param {String} fileType The file type to append to
     */
    dirAppend(code: String, fileType: String) {
        DirAppend(code, fileType);
    }

    /**
     *  Ends the html document
     */
    end() {
        EndHtml();
    }
}

export {
    Website
}